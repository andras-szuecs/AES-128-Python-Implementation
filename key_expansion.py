from constants import sbox, Rcon
import unittest
 
def keyexpansioncore(key):
    rotated_key = key[1:] + key[:1]
    sub_key = []
    for i in rotated_key:
        sub_key.append(sbox[i])

    return sub_key   

def gen_next_key(key):
    nextkey = []
    for i in range(0,len(key),4):
        nextkey += keyexpansioncore(key[i:i+4])
    return nextkey

def depricatedkeyexpansion11(key):
    keys = [key]
    for i in range(10):
        key = gen_next_key(key)
        keys.append(key)
    return keys 

def regroup(key):
    words = []
    for i in range(0,16,4):
        currword = (key[i+0]<<24) + (key[i+1]<<16) + (key[i+2]<<8) + key[i+3]
        words.append(currword)
    return words

def ungroup(words):
    key = []
    for w in words:
        for byteindex in range(0,31,8):
            byte = 0
            byte = (w >> 24-byteindex) & 0xff
            key.append(byte)
    return key    

def subword(word):
    sword = 0
    for i in range(0, 31, 8):
        byteindex = 24-i
        byte = 0xff & word>>byteindex
        sword <<= 8
        sword |= sbox[byte]
    return sword

def subword1(word):
    sword = 0
    for i in range(0, 31, 8):
        byte = word & 0xff
        sword |= sbox[byte] << i
        word >>= 8
    return sword

def rotword(word):
    b0 = word>>24
    return 0xffffffff & ((word<<8) | b0)

def keyexpansion11(key):
    N = 4
    R = 11
    words = regroup(key)
    for i in range(N, N*R):
        if i % N == 0:
            Rconi = Rcon[i//N]
            Win = words[i-N]
            Wsubrot = subword(rotword(words[-1]))
            print(hex(Rconi), hex(Win), hex(Wsubrot), hex(words[-1]), hex(rotword(words[-1])), hex(Win^Rconi^Wsubrot))
            words.append(Win^Rconi^Wsubrot)
        else:
            print(hex(words[-1]), hex(words[i-N]), hex(words[-1]^words[i-N]))
            words.append(words[-1]^words[i-N])
        
    return ungroup(words)

    

class TestStringMethods(unittest.TestCase):
    def test_regroup_keys(self):
        words = [0x01122334, 0x45566778, 0x899aabbc, 0xcddeeff0]
        key = [0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0]
        self.assertEqual(words, regroup(key))
    def test_ungroup_keys(self):
        words = [0x01122334, 0x45566778, 0x899aabbc, 0xcddeeff0]
        key = [0x01, 0x12, 0x23, 0x34, 0x45, 0x56, 0x67, 0x78, 0x89, 0x9a, 0xab, 0xbc, 0xcd, 0xde, 0xef, 0xf0]
        self.assertEqual(key, ungroup(words))
    def test_rotword(self):
        self.assertEqual(0x34567812, rotword(0x12345678))
    def test_subword(self):
        self.assertEqual(subword(0x12345678), subword1(0x12345678))
    def test_keyexpansion11(self):
        expanded = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75,
                    0xE2, 0x32, 0xFC, 0xF1, 0x91, 0x12, 0x91, 0x88, 0xB1, 0x59, 0xE4, 0xE6, 0xD6, 0x79, 0xA2, 0x93,
                    0x56, 0x08, 0x20, 0x07, 0xC7, 0x1A, 0xB1, 0x8F, 0x76, 0x43, 0x55, 0x69, 0xA0, 0x3A, 0xF7, 0xFA,
                    0xD2, 0x60, 0x0D, 0xE7, 0x15, 0x7A, 0xBC, 0x68, 0x63, 0x39, 0xE9, 0x01, 0xC3, 0x03, 0x1E, 0xFB,
                    0xA1, 0x12, 0x02, 0xC9, 0xB4, 0x68, 0xBE, 0xA1, 0xD7, 0x51, 0x57, 0xA0, 0x14, 0x52, 0x49, 0x5B,
                    0xB1, 0x29, 0x3B, 0x33, 0x05, 0x41, 0x85, 0x92, 0xD2, 0x10, 0xD2, 0x32, 0xC6, 0x42, 0x9B, 0x69,
                    0xBD, 0x3D, 0xC2, 0x87, 0xB8, 0x7C, 0x47, 0x15, 0x6A, 0x6C, 0x95, 0x27, 0xAC, 0x2E, 0x0E, 0x4E,
                    0xCC, 0x96, 0xED, 0x16, 0x74, 0xEA, 0xAA, 0x03, 0x1E, 0x86, 0x3F, 0x24, 0xB2, 0xA8, 0x31, 0x6A,
                    0x8E, 0x51, 0xEF, 0x21, 0xFA, 0xBB, 0x45, 0x22, 0xE4, 0x3D, 0x7A, 0x06, 0x56, 0x95, 0x4B, 0x6C,
                    0xBF, 0xE2, 0xBF, 0x90, 0x45, 0x59, 0xFA, 0xB2, 0xA1, 0x64, 0x80, 0xB4, 0xF7, 0xF1, 0xCB, 0xD8,
                    0x28, 0xFD, 0xDE, 0xF8, 0x6D, 0xA4, 0x24, 0x4A, 0xCC, 0xC0, 0xA4, 0xFE, 0x3B, 0x31, 0x6F, 0x26]

        key = [0x54, 0x68, 0x61, 0x74, 0x73, 0x20, 0x6D, 0x79, 0x20, 0x4B, 0x75, 0x6E, 0x67, 0x20, 0x46, 0x75]
        self.maxDiff = None
        self.assertEqual([hex(b) for b in keyexpansion11(key)],[hex(b) for b in expanded])


if __name__ == '__main__':
    unittest.main()

